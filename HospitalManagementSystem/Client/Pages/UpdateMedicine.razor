@page "/updatemedicine/{id:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject NotificationService notificationService
@inject IJSRuntime Js
@inject Radzen.DialogService DialogService
@inject ISyncLocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="10">
            <RadzenTemplateForm Data="@medicine" TItem="Medicines" Submit="HandleSubmit">
                <MudGrid Class="mt-2">
                    <MudItem xs="12">
                        <RadzenText TextStyle="TextStyle.H4"><b>Update Medicine</b></RadzenText>
                    </MudItem>
                    <MudItem xs="2" Class="mt-2">
                        <RadzenText TextStyle="TextStyle.Body2"><b>Medicine Name</b></RadzenText>
                    </MudItem>
                    <MudItem xs="10">
                        <RadzenTextBox @bind-Value="medicine.Name" MaxLength="50" Placeholder="Enter Medicine Name" Style="width:75%;" />
                    </MudItem>
                    <MudItem xs="2" Class="mt-2">
                        <RadzenText TextStyle="TextStyle.Body2"><b>Mfg. Date</b></RadzenText>
                    </MudItem>
                    <MudItem xs="4">
                        <RadzenDatePicker @bind-Value="medicine.MfgDate" DateFormat="dd-MMM-yyyy" Max="DateTime.Today" Style="width:100%;" />
                    </MudItem>
                    <MudItem xs="2" Class="mt-2">
                        <RadzenText TextStyle="TextStyle.Body2"><b>Exp. Date</b></RadzenText>
                    </MudItem>
                    <MudItem xs="4">
                        <RadzenDatePicker @bind-Value="medicine.ExpDate" DateFormat="dd-MMM-yyyy" Min="DateTime.Today" Style="width:100%;" />
                    </MudItem>
                    <MudItem xs="2" Class="mt-2">
                        <RadzenText TextStyle="TextStyle.Body2"><b>Price (Rs.)</b></RadzenText>
                    </MudItem>
                    <MudItem xs="4">
                        <RadzenNumeric @bind-Value="medicine.Price" Placeholder="Ex. 10.99"  Style="width:100%;" />
                    </MudItem>
                            <MudItem xs="2" Class="mt-2">
                        <RadzenText TextStyle="TextStyle.Body2"><b>Medicines Count</b></RadzenText>
                    </MudItem>
                    <MudItem xs="4">
                        <RadzenNumeric @bind-Value="medicine.AvailableMedicinesCount" Style="width:100%;" />
                    </MudItem>
                    <MudItem xs="12" Class="text-center">
                        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Style="width:100px;" class="mt-2">Update</RadzenButton>
                    </MudItem>
                </MudGrid>
            </RadzenTemplateForm>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Parameter]
    public int Id { get; set; }

    Medicines medicine = new Medicines();
    Timer timer = new Timer(1000);
    string token = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var result = await Http.GetFromJsonAsync<Medicines>($"api/Medicines/{Id}");
        if (result != null)
        {
            medicine = result;
        }
        StartTimer();
    }

    void StartTimer()
    {
        timer.Start();
        timer.Elapsed += CheckCurrentState;
    }

    private async void CheckCurrentState(object o, ElapsedEventArgs args)
    {
        token = LocalStorage.GetItemAsString("token");
        if (string.IsNullOrEmpty(token))
        {
            await AuthStateProvider.GetAuthenticationStateAsync();
            timer.Stop();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        string price = medicine.Price.ToString();
        string[] strings = price.Split(".");
        string precision = strings[1];
        if (precision.Length > 2)
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Price precision value should be 2 characters only..", Duration = 10000 };
            notificationService.Notify(message);
            navigationManager.NavigateTo($"updatemedicine/{Id}");
        }
        else
        {
            var response = await Http.PutAsJsonAsync("api/Medicines", medicine);
            if (response.IsSuccessStatusCode)
            {
                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Medicine Updated Successfully...!", Duration = 10000 };
                notificationService.Notify(message);
                navigationManager.NavigateTo("medicinelist");
            }
        }
    }
}
